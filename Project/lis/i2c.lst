C51 COMPILER V9.02   I2C                                                                   06/09/2018 16:51:22 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\output\i2c.obj
COMPILER INVOKED BY: d:\Program Files\Keil_v5\C51\BIN\C51.EXE ..\main\i2c.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\main) DEB
                    -UG OBJECTEXTEND PRINT(.\lis\i2c.lst) PREPRINT(.\lis\i2c.i) OBJECT(.\output\i2c.obj)

line level    source

   1          #include "STC89C5XRC.h"
   2          #include <intrins.h>
   3          #include "i2c.h"
   4          
   5          sbit  SCL=P0^0;
   6          sbit  SDA=P0^1;
   7          ///************************************
   8          //** 函数原型: void IC_start(void); **
   9          //** 功 能: IC 总线起始位. **
  10          //************************************/
  11          static void IC_start(void)
  12          {
  13   1              SCL=1; /** Send Start **/
  14   1              SDA=1;
  15   1              _nop_();
  16   1              _nop_();
  17   1              SDA=0;
  18   1              _nop_();
  19   1              _nop_();
  20   1              SCL=0;
  21   1      }
  22          ////**********************************
  23          ////** 函数原型: void IC_stop(void); **
  24          ////** 功 能: IC 总线停止位. **
  25          ////**********************************/
  26          static void IC_stop(void)
  27          {
  28   1              SCL=0; /** Send Stop **/
  29   1              SDA=0;
  30   1              _nop_();
  31   1              _nop_();
  32   1              SCL=1;
  33   1              _nop_();
  34   1              _nop_();
  35   1              SDA=1;
  36   1      }
  37          /////***************************************************
  38          ////** 函数原型: bit IC_writebyte(uchar wdata); **
  39          ////** 功 能: 向 IC 总线发送 8 位数据,并请求一个应答信 **
  40          ////** 号 ACK.如果收到 ACK 应答则返回 1(TRUE), **
  41          ////** 否则返回 0(FALSE). **
  42          ////***************************************************/
  43          static unsigned char IC_WriteByte( unsigned char wdata)
  44          {
  45   1              unsigned char i;
  46   1              for(i=0; i<8; i++)
  47   1              {
  48   2                      SCL=0;
  49   2                      SCL=0;
  50   2                      _nop_();
  51   2                      _nop_();
  52   2                      if(wdata&0x80) SDA=1;
  53   2                      else SDA=0;
  54   2                      _nop_();
C51 COMPILER V9.02   I2C                                                                   06/09/2018 16:51:22 PAGE 2   

  55   2                      _nop_();
  56   2                      SCL=1;
  57   2                      wdata<<=1;
  58   2              }
  59   1              SCL=0;
  60   1              SCL=0;
  61   1              _nop_();
  62   1              _nop_();
  63   1              SCL=1;
  64   1              i=0;
  65   1              while(SDA)
  66   1              {
  67   2                      if(++i>12)
  68   2                      {
  69   3                              SCL=0;
  70   3                              return(0);
  71   3                      }
  72   2              }
  73   1              SCL=0;
  74   1              return(1);
  75   1      }
  76          /////***********************************************
  77          ////** 函数原型: uchar IC_readbyte(void); **
  78          ////** 功 能: 从 IC 总线上接收 8 位数据,并将接受到 **
  79          ////** 8 位数据作为一个字节返回,不回送应 **
  80          ////** 答信号 ACK. **
  81          ////***********************************************/
  82          static unsigned char IC_ReadByte(void)
  83          {
  84   1              unsigned char i;
  85   1              unsigned char IC_data=0;
  86   1              SCL=0;
  87   1              SDA=1;
  88   1              for(i=0; i<8; i++)
  89   1              {
  90   2                      SCL=1;
  91   2                      SCL=1;
  92   2                      _nop_();
  93   2                      _nop_();
  94   2                      IC_data<<=1;
  95   2                      IC_data|=SDA;
  96   2                      _nop_();
  97   2                      SCL=1;
  98   2                      _nop_();
  99   2                      SCL=0;
 100   2                      _nop_();
 101   2              }
 102   1              _nop_();
 103   1              _nop_();
 104   1              _nop_();
 105   1              SCL=0;
 106   1              SDA=0;
 107   1              return(IC_data);
 108   1      }
 109          /////***************************************************************
 110          ////** 函数原型: bit readEEone(uchar instr,uchar addr,uchar num); **
 111          ////** 功 能: 从 S42WD42 中读取 num 个字节的数据,采用序列读操作方 **
 112          ////** 式从片内 Address 地址开始连续读取数据.S42WD42 不接 **
 113          ////** 受指定的地址则返回 0(FALSE). **
 114          ////***************************************************************/
 115          unsigned char RX8025ReadBytes(unsigned char addr,unsigned char *time, unsigned char num)
 116          {
C51 COMPILER V9.02   I2C                                                                   06/09/2018 16:51:22 PAGE 3   

 117   1              unsigned char i;
 118   1              IC_start();
 119   1              if(IC_WriteByte(0x64)==0)
 120   1              {
 121   2                      IC_stop();
 122   2                      return(0);
 123   2              }
 124   1              if(IC_WriteByte(addr)==0)
 125   1              {
 126   2                      IC_stop();
 127   2                      return(0);
 128   2              }
 129   1              IC_start();
 130   1              if(IC_WriteByte(0x65)==0)
 131   1              {
 132   2                      IC_stop();
 133   2                      return(0);
 134   2              }
 135   1              for(i=0; i<num-1; i++)
 136   1              {
 137   2                      time[i]=IC_ReadByte();
 138   2                      SDA=0; /** Send ACK **/
 139   2                      SDA=0;
 140   2                      SCL=1;
 141   2              }
 142   1              time[num-1] = IC_ReadByte();
 143   1              SDA=1; /** Send Read End **/
 144   1              SDA=1;
 145   1              _nop_();
 146   1              SCL=1;
 147   1              IC_stop();
 148   1              return(1);
 149   1      }
 150          ///****************************************************************
 151          //** 函数原型: bit writeEEone(uchar instr,uchar addr,uchar num); **
 152          //** 功 能: 将 EEbuf[]单元中的数据写入 S42WD42 的 num 个字节. **
 153          //** 采用页写操作方式,每次写入时都需要指定片内地址. **
 154          //** 如果 S42WD42 不接受指定的地址或某个传送的字节未收到 **
 155          //** 应答信号 ACK,则返回 0(FALSE). **
 156          //****************************************************************/
 157          unsigned char RX8025WriteBytes(unsigned char addr,unsigned char *time, unsigned char num)
 158          {
 159   1              unsigned char i;
 160   1              IC_start();
 161   1              if(IC_WriteByte(0x64)==0)
 162   1              {
 163   2                      IC_stop();
 164   2                      return(0);
 165   2              }
 166   1              if(IC_WriteByte(addr)==0)
 167   1              {
 168   2                      IC_stop();
 169   2                      return(0);
 170   2              }
 171   1              for(i=0; i<num; i++)
 172   1              {
 173   2                      if(IC_WriteByte(time[i])==0)
 174   2                      {
 175   3                              IC_stop();
 176   3                              return(0);
 177   3                      }
 178   2              }
C51 COMPILER V9.02   I2C                                                                   06/09/2018 16:51:22 PAGE 4   

 179   1              IC_stop();
 180   1              _nop_();
 181   1              _nop_();
 182   1              SDA=0;
 183   1              SCL=0;
 184   1              return(1);
 185   1      }
 186          static void dec_to_hex(unsigned char *dec,unsigned char *hex,unsigned char len)
 187          {
 188   1              unsigned char i;        
 189   1              for(i = 0; i < len; i++)
 190   1              {
 191   2                      hex[i] = ((dec[i] / 10) << 4) + dec[i] % 10;
 192   2              }
 193   1      }
 194          static void hex_to_dec(unsigned char *dec,unsigned char *hex,unsigned char len)
 195          {
 196   1              unsigned char i;        
 197   1              for(i = 0; i < len; i++)
 198   1              {
 199   2                      dec[i] = (hex[i] & 0x0f) + ((hex[i] >> 4) * 10);
 200   2              }
 201   1      }
 202          unsigned char bit_to_dec_week(unsigned char dat)
 203          {
 204   1              unsigned char i;
 205   1              for(i = 0; i < 7; i++)
 206   1              {
 207   2                      if(dat & (0x01<<i))
 208   2                      {
 209   3                              return i;
 210   3                      }
 211   2              }
 212   1              return 0;
 213   1      }
 214          
 215          void Get_Time_Dec(unsigned char *time)
 216          {
 217   1              unsigned char time_hex[7] = {0};
 218   1              RX8025ReadBytes(0,time_hex,7);
 219   1              hex_to_dec(time,time_hex,7);
 220   1              time[3] = bit_to_dec_week(time_hex[3]);
 221   1      }
 222          
 223          void Set_Time_Dec(unsigned char *time_dec)
 224          {
 225   1              unsigned char time_hex[7] = {0};
 226   1              dec_to_hex(time_dec,time_hex,7);
 227   1              time_hex[3] = 0x01 << time_dec[3];
 228   1              RX8025WriteBytes(0,time_hex,7);
 229   1      }
 230          
 231          void Get_Alarm_EveryDay(unsigned char *alarm_time)
 232          {
 233   1              unsigned char time_hex[2] = {0};
 234   1              RX8025ReadBytes(0x08,time_hex,2);
 235   1              hex_to_dec(alarm_time,time_hex,2);
 236   1      }
 237          
 238          void Set_Alarm_EveryDay(unsigned char *alarm_time)
 239          {
 240   1              unsigned char time_hex[2] = {0};
C51 COMPILER V9.02   I2C                                                                   06/09/2018 16:51:22 PAGE 5   

 241   1              dec_to_hex(alarm_time,time_hex,2);      
 242   1              RX8025WriteBytes(0x08,time_hex,2);
 243   1              RX8025WriteBytes(0x0a,0x80,1);
 244   1      }
 245          
 246          void Enable_Alarm(bit p)
 247          {
 248   1              unsigned char dat = 0,clean = 0;
 249   1              if(p)
 250   1              {
 251   2                      dat = 0x08;
 252   2                      RX8025WriteBytes(0x0e,&clean,1);
 253   2              }       
 254   1              RX8025WriteBytes(0x0f,&dat,1);
 255   1      }
 256          
 257          
 258          bit Recovery_Default_Setting()
 259          {
 260   1              unsigned char dat[16] = {0};
 261   1              
 262   1              memset(dat, 0, 16);
 263   1              if(!RX8025WriteBytes(0,dat,16))
 264   1              {
 265   2                      return 0;
 266   2              }
 267   1              
 268   1      //      para_dat.timeout_colse = 5;
 269   1      //      para_dat.disp_mode = 0;
 270   1      //      para_dat.led_cloor = 0x40;
 271   1      //      para_dat.led_rate = 2;
 272   1      //      para_dat.led_pwm[0] = 0;
 273   1      //      para_dat.led_pwm[0] = 0;
 274   1      //      para_dat.led_pwm[0] = 0;
 275   1      //      para_dat.reserve = 0xaa;
 276   1      //      
 277   1      //      IapEraseSector(IAP_ADDRESS);
 278   1      //      Delay50ms();
 279   1      //      memcpy(dat, &para_dat, sizeof(Parameter_data));
 280   1      //      
 281   1      //      for (i=0; i<sizeof(Parameter_data); i++)           //Check whether all sector data is FF
 282   1      //    {
 283   1      //        IapProgramByte(IAP_ADDRESS + i,dat[i]);
 284   1      //    }
 285   1      //      Delay50ms();
 286   1      //      memset(dat, 0, 16);     
 287   1      //      for (i=0; i<sizeof(Parameter_data); i++)           //Check whether all sector data is FF
 288   1      //    {
 289   1      //        dat[i] = IapReadByte(IAP_ADDRESS + i);
 290   1      //    }
 291   1      //      Delay50ms();
 292   1      //      if(memcmp(dat, &para_dat, 8) != 0);
 293   1      //      {
 294   1      //              return 0;
 295   1      //      }
 296   1      
 297   1              return 1;
 298   1      }
 299          bit Get_Init_RX8025_Flag()
 300          {
 301   1              unsigned char dat;      
 302   1              RX8025ReadBytes(0x0e,&dat,1);   
C51 COMPILER V9.02   I2C                                                                   06/09/2018 16:51:22 PAGE 6   

 303   1              if(dat & 0x02)
 304   1              {
 305   2                      return 0;
 306   2              }
 307   1              else 
 308   1              {
 309   2                      return 1;
 310   2              }       
 311   1      }
 312          bit Get_Alarm_Status()
 313          {
 314   1              unsigned char dat;      
 315   1              RX8025ReadBytes(0x0f,&dat,1);   
 316   1              if(dat & 0x08)
 317   1              {
 318   2                      return 1;
 319   2              }
 320   1              else 
 321   1              {
 322   2                      return 0;
 323   2              }
 324   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    921    ----
   CONSTANT SIZE    =     34    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      74
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
